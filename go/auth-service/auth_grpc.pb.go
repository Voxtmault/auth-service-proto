// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: auth.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	BasicLogin(ctx context.Context, in *BasicLoginRequest, opts ...grpc.CallOption) (*BasicLoginResponse, error)
	VerifyJWT(ctx context.Context, in *VerifyJWTRequest, opts ...grpc.CallOption) (*VerifyJWTResponse, error)
	VerifyAPIKey(ctx context.Context, in *VerifyAPIKeyRequest, opts ...grpc.CallOption) (*VerifyAPIKeyResponse, error)
	GetPersonnelData(ctx context.Context, in *GetPersonnelDataRequest, opts ...grpc.CallOption) (*GetPersonnelDataResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) BasicLogin(ctx context.Context, in *BasicLoginRequest, opts ...grpc.CallOption) (*BasicLoginResponse, error) {
	out := new(BasicLoginResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/BasicLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyJWT(ctx context.Context, in *VerifyJWTRequest, opts ...grpc.CallOption) (*VerifyJWTResponse, error) {
	out := new(VerifyJWTResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) VerifyAPIKey(ctx context.Context, in *VerifyAPIKeyRequest, opts ...grpc.CallOption) (*VerifyAPIKeyResponse, error) {
	out := new(VerifyAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/VerifyAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetPersonnelData(ctx context.Context, in *GetPersonnelDataRequest, opts ...grpc.CallOption) (*GetPersonnelDataResponse, error) {
	out := new(GetPersonnelDataResponse)
	err := c.cc.Invoke(ctx, "/auth.AuthService/GetPersonnelData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	BasicLogin(context.Context, *BasicLoginRequest) (*BasicLoginResponse, error)
	VerifyJWT(context.Context, *VerifyJWTRequest) (*VerifyJWTResponse, error)
	VerifyAPIKey(context.Context, *VerifyAPIKeyRequest) (*VerifyAPIKeyResponse, error)
	GetPersonnelData(context.Context, *GetPersonnelDataRequest) (*GetPersonnelDataResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (UnimplementedAuthServiceServer) BasicLogin(context.Context, *BasicLoginRequest) (*BasicLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicLogin not implemented")
}
func (UnimplementedAuthServiceServer) VerifyJWT(context.Context, *VerifyJWTRequest) (*VerifyJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyJWT not implemented")
}
func (UnimplementedAuthServiceServer) VerifyAPIKey(context.Context, *VerifyAPIKeyRequest) (*VerifyAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAPIKey not implemented")
}
func (UnimplementedAuthServiceServer) GetPersonnelData(context.Context, *GetPersonnelDataRequest) (*GetPersonnelDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonnelData not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_BasicLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).BasicLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/BasicLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).BasicLogin(ctx, req.(*BasicLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyJWT(ctx, req.(*VerifyJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_VerifyAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).VerifyAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/VerifyAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).VerifyAPIKey(ctx, req.(*VerifyAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetPersonnelData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonnelDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetPersonnelData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/GetPersonnelData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetPersonnelData(ctx, req.(*GetPersonnelDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BasicLogin",
			Handler:    _AuthService_BasicLogin_Handler,
		},
		{
			MethodName: "VerifyJWT",
			Handler:    _AuthService_VerifyJWT_Handler,
		},
		{
			MethodName: "VerifyAPIKey",
			Handler:    _AuthService_VerifyAPIKey_Handler,
		},
		{
			MethodName: "GetPersonnelData",
			Handler:    _AuthService_GetPersonnelData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
