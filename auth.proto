syntax = "proto3";

option go_package = "./auth-service";

package auth;

service AuthService {
    rpc BasicLogin(BasicLoginRequest) returns (BasicLoginResponse) {}
    rpc VerifyJWT(VerifyJWTRequest) returns (VerifyJWTResponse) {}
    rpc VerifyAPIKey(VerifyAPIKeyRequest) returns (VerifyAPIKeyResponse){}
    rpc GetPersonnelData(GetPersonnelDataRequest) returns (GetPersonnelDataResponse){}
}

message GenericResponse {
  uint32 response = 1;
  string message = 2;
}

message BasicLoginRequest {
  string username = 1;
  string password = 2;
  string loginAs = 3; //Table name
}
message BasicLoginResponse {
  uint32 response = 1;
  string message = 2;
  string jwt = 3;
  uint64 idUser = 4;
  string loggedInAs = 5;
}

message VerifyJWTRequest {
  string token = 1;
}
message VerifyJWTResponse {
  uint32 response = 1;
  string message = 2;
  string jsonData = 3;
}

message VerifyAPIKeyRequest {
  string apiToken = 1; // Base64 Encoded
}
message VerifyAPIKeyResponse {
  uint32 response = 1;
  string message = 2;
  string apiName = 3;
}

message GetPersonnelDataRequest {
  string token = 1;
  string apiToken = 2;
}
message GetPersonnelDataResponse {
  uint32 response = 1;
  string message = 2;
  string jsonData = 3;
}

// API Sub-Services
message API {
  uint32 apiId = 1; 
  string apiName = 2;
  string createdAt = 3;
}

message RegisterAuthorizedAPIRequest {
  string apiName = 1;
}
message RegisterAuthorizedAPIResponse {
  uint32 response = 1;
  string message = 2;
  string apiToken = 3; // Base64 Encoded (Use as is)
}

message RollingAPIKeyRequest {
  string apiToken = 1; // Base64 Encoded
}
message RollingAPIKeyResponse {
  uint32 response = 1;
  string message = 2;
  string apiToken = 3; // Base64 Encoded (Use as is)
}

message DisableAPIRequest {
  string apiKey = 1;
  uint32 apiId = 2;
}
// DisableAPIRequest uses GenericResponse

message GetRegisteredAPIRequest {
  string token = 1;
}
message GetRegisteredAPIResponse {
  uint32 response = 1;
  repeated API api = 2;
}