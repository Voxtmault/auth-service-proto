/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: api.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.auth = require('./api_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.APIServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.APIServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.RegisterAuthorizedAPIRequest,
 *   !proto.auth.RegisterAuthorizedAPIResponse>}
 */
const methodDescriptor_APIService_RegisterAuthorizedAPI = new grpc.web.MethodDescriptor(
  '/auth.APIService/RegisterAuthorizedAPI',
  grpc.web.MethodType.UNARY,
  proto.auth.RegisterAuthorizedAPIRequest,
  proto.auth.RegisterAuthorizedAPIResponse,
  /**
   * @param {!proto.auth.RegisterAuthorizedAPIRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.RegisterAuthorizedAPIResponse.deserializeBinary
);


/**
 * @param {!proto.auth.RegisterAuthorizedAPIRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.RegisterAuthorizedAPIResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.RegisterAuthorizedAPIResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.APIServiceClient.prototype.registerAuthorizedAPI =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.APIService/RegisterAuthorizedAPI',
      request,
      metadata || {},
      methodDescriptor_APIService_RegisterAuthorizedAPI,
      callback);
};


/**
 * @param {!proto.auth.RegisterAuthorizedAPIRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.RegisterAuthorizedAPIResponse>}
 *     Promise that resolves to the response
 */
proto.auth.APIServicePromiseClient.prototype.registerAuthorizedAPI =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.APIService/RegisterAuthorizedAPI',
      request,
      metadata || {},
      methodDescriptor_APIService_RegisterAuthorizedAPI);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.RollingAPIKeyRequest,
 *   !proto.auth.RollingAPIKeyResponse>}
 */
const methodDescriptor_APIService_RollingAPIKey = new grpc.web.MethodDescriptor(
  '/auth.APIService/RollingAPIKey',
  grpc.web.MethodType.UNARY,
  proto.auth.RollingAPIKeyRequest,
  proto.auth.RollingAPIKeyResponse,
  /**
   * @param {!proto.auth.RollingAPIKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.RollingAPIKeyResponse.deserializeBinary
);


/**
 * @param {!proto.auth.RollingAPIKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.RollingAPIKeyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.RollingAPIKeyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.APIServiceClient.prototype.rollingAPIKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.APIService/RollingAPIKey',
      request,
      metadata || {},
      methodDescriptor_APIService_RollingAPIKey,
      callback);
};


/**
 * @param {!proto.auth.RollingAPIKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.RollingAPIKeyResponse>}
 *     Promise that resolves to the response
 */
proto.auth.APIServicePromiseClient.prototype.rollingAPIKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.APIService/RollingAPIKey',
      request,
      metadata || {},
      methodDescriptor_APIService_RollingAPIKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.DisableAPIRequest,
 *   !proto.auth.GenericResponse>}
 */
const methodDescriptor_APIService_DisableAPI = new grpc.web.MethodDescriptor(
  '/auth.APIService/DisableAPI',
  grpc.web.MethodType.UNARY,
  proto.auth.DisableAPIRequest,
  proto.auth.GenericResponse,
  /**
   * @param {!proto.auth.DisableAPIRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.GenericResponse.deserializeBinary
);


/**
 * @param {!proto.auth.DisableAPIRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.GenericResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.GenericResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.APIServiceClient.prototype.disableAPI =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.APIService/DisableAPI',
      request,
      metadata || {},
      methodDescriptor_APIService_DisableAPI,
      callback);
};


/**
 * @param {!proto.auth.DisableAPIRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.GenericResponse>}
 *     Promise that resolves to the response
 */
proto.auth.APIServicePromiseClient.prototype.disableAPI =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.APIService/DisableAPI',
      request,
      metadata || {},
      methodDescriptor_APIService_DisableAPI);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.GetRegisteredAPIRequest,
 *   !proto.auth.GetRegisteredAPIResponse>}
 */
const methodDescriptor_APIService_GetRegisteredAPI = new grpc.web.MethodDescriptor(
  '/auth.APIService/GetRegisteredAPI',
  grpc.web.MethodType.UNARY,
  proto.auth.GetRegisteredAPIRequest,
  proto.auth.GetRegisteredAPIResponse,
  /**
   * @param {!proto.auth.GetRegisteredAPIRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.auth.GetRegisteredAPIResponse.deserializeBinary
);


/**
 * @param {!proto.auth.GetRegisteredAPIRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.GetRegisteredAPIResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.GetRegisteredAPIResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.APIServiceClient.prototype.getRegisteredAPI =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.APIService/GetRegisteredAPI',
      request,
      metadata || {},
      methodDescriptor_APIService_GetRegisteredAPI,
      callback);
};


/**
 * @param {!proto.auth.GetRegisteredAPIRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.GetRegisteredAPIResponse>}
 *     Promise that resolves to the response
 */
proto.auth.APIServicePromiseClient.prototype.getRegisteredAPI =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.APIService/GetRegisteredAPI',
      request,
      metadata || {},
      methodDescriptor_APIService_GetRegisteredAPI);
};


module.exports = proto.auth;

